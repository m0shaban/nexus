import { NextRequest, NextResponse } from 'next/server'
import { getSupabaseAdmin } from '@/lib/supabase'

export const maxDuration = 60; // Set maximum execution time to 60 seconds

export async function POST(request: NextRequest) {
  try {
    const { noteId } = await request.json()

    if (!noteId) {
      return NextResponse.json({ error: 'Note ID is required' }, { status: 400 })
    }

    const supabaseAdmin = getSupabaseAdmin()

    // Get the note
    const { data: note, error: fetchError } = await supabaseAdmin
      .from('notes')
      .select('*')
      .eq('id', noteId)
      .single()

    if (fetchError || !note) {
      return NextResponse.json({ error: 'Note not found' }, { status: 404 })
    }

    // Update status to analyzing
    await supabaseAdmin
      .from('notes')
      .update({ analysis_status: 'analyzing' })
      .eq('id', noteId)

    try {
      // Validate NVIDIA API configuration
      if (!process.env.NVIDIA_API_KEY || !process.env.NVIDIA_API_BASE_URL) {
        console.error('NVIDIA API credentials not configured');
        throw new Error('NVIDIA API credentials not configured');
      }
      
      console.log('[AnalyzeAPI] Calling NVIDIA AI API');
      
      // Call NVIDIA AI API with improved error handling
      const response = await fetch(`${process.env.NVIDIA_API_BASE_URL}/chat/completions`, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${process.env.NVIDIA_API_KEY}`,
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          model: 'nvidia/llama-3.1-nemotron-ultra-253b-v1', // Fallback to other models if this fails
          messages: [
            {
              role: 'system',
              content: 'أنت مساعد ذكي متخصص في تحليل النصوص. مهمتك هي تلخيص النص في جملة واحدة مفيدة، ثم طرح 3 أسئلة مفتوحة ومحفزة للتفكير حول المحتوى. اجعل الأسئلة عميقة ومثيرة للاهتمام وتشجع على الاستكشاف والتطوير.'
            },
            {
              role: 'user',
              content: `يرجى تحليل النص التالي:

"${note.content}"

اعطني:
1. ملخص في جملة واحدة
2. ثلاثة أسئلة مفتوحة ومحفزة للتفكير

اجعل الإجابة في صيغة JSON كالتالي:
{
  "summary": "الملخص هنا",
  "questions": ["السؤال الأول", "السؤال الثاني", "السؤال الثالث"]
}`
            }
          ],
          temperature: 0.7,
          max_tokens: 500
        })
      });

      if (!response.ok) {
        const errorData = await response.text();
        console.error(`NVIDIA API error (${response.status}):`, errorData);
        throw new Error(`NVIDIA API error: ${response.status} - ${errorData}`);
      }

      // Parse and log the AI response
      const aiResponse = await response.json();
      console.log('[AnalyzeAPI] NVIDIA API response received:', 
                  JSON.stringify({
                    id: aiResponse.id,
                    model: aiResponse.model,
                    choices_length: aiResponse.choices?.length
                  }));
      
      const content = aiResponse.choices[0]?.message?.content;

      if (!content) {
        console.error('[AnalyzeAPI] No content in AI response:', aiResponse);
        throw new Error('No content in AI response');
      }

      // Try to parse JSON response
      let aiSummary = ''
      let aiQuestions: string[] = []

      try {
        console.log('[AnalyzeAPI] Parsing AI response content:', content);
        const parsed = JSON.parse(content)
        aiSummary = parsed.summary || ''
        aiQuestions = parsed.questions || []
        console.log('[AnalyzeAPI] Successfully parsed JSON response');
      } catch (parseError) {
        // Fallback: treat as plain text
        console.error('[AnalyzeAPI] Failed to parse JSON response:', parseError);
        aiSummary = content
        aiQuestions = []
      }
      
      console.log('[AnalyzeAPI] Updating note with AI analysis');
      
      // Update the note with AI analysis
      const { error: updateError } = await supabaseAdmin
        .from('notes')
        .update({
          ai_summary: aiSummary,
          ai_questions: aiQuestions,
          analysis_status: 'completed'
        })
        .eq('id', noteId)

      if (updateError) {
        console.error('[AnalyzeAPI] Failed to update note:', updateError);
        throw new Error('Failed to update note with AI analysis')
      }

      console.log('[AnalyzeAPI] Analysis completed successfully');
      
      return NextResponse.json({
        success: true,
        summary: aiSummary,
        questions: aiQuestions
      })

    } catch (aiError) {
      console.error('[AnalyzeAPI] AI analysis error:', aiError)
      
      // Update status to error
      await supabaseAdmin
        .from('notes')
        .update({ analysis_status: 'error' })
        .eq('id', noteId)

      return NextResponse.json({
        error: 'Failed to analyze note',
        details: aiError instanceof Error ? aiError.message : String(aiError)
      }, { status: 500 })
    }

  } catch (error) {
    console.error('[AnalyzeAPI] General error:', error)
    return NextResponse.json({ 
      error: 'Internal server error',
      details: error instanceof Error ? error.message : String(error)
    }, { status: 500 })
  }
}
